package week4;

public class SynchronizedBuffer implements ABQ_Buffer {
	
	private int buffer = -1;
	private boolean occupied = false;
	
	// place value into buffer
	public synchronized void blockingPut(int value) throws InterruptedException {
		
		// while there are no empty locations, place thread in waiting state
		while(occupied) {
			System.out.println("Producer tries to write.");
			displayState("Buffer full. Producer waits");
			wait();
		}
		
		buffer = value; // set new buffer value
		
		// indicate producer cannot store another value until consumer retrieves current buffer value
		occupied = true;
		
		displayState("Producer writes " + buffer);
		
		notifyAll(); // tells waiting threads to enter runnable state
	}
	
	public synchronized int blockingGet() throws InterruptedException {
		
		// while no data to read, place thread in waiting state
		while(!occupied) {
			System.out.println("Consumer tries to read.");
			displayState("Buffer empty. Consumer waits.");
			wait();
		}
		
		// indicate that producer can store another value because consumer just retrieved buffer value
		occupied = false;
		
		displayState("Consumer reads " + buffer);
		
		notifyAll();	// tell waiting threads to enter runnable state
		
		return buffer;
	}	// end method blockingGet
	
	// display current operation and buffer state
	private synchronized void displayState(String operation) {
		
		System.out.printf("%-40s%d\t\t%n%n%n", operation, buffer, occupied);
	}
}










